
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>be.cegeka.zombies</groupId>
	<artifactId>plants-vs-zombies</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<repositories>
		<repository>
			<id>local-repo</id>
			<!-- This is configured in Eclipse as an env. variable. -->
			<url>${M2_REPO}</url>
		</repository>
	</repositories>

	<properties>
		<project.js.test.directory>${basedir}/src/test/javascript</project.js.test.directory>
	</properties>

	<dependencies>
		<dependency>
			<groupId>be.cegeka</groupId>
			<artifactId>jasminejunitrunner</artifactId>
			<version>1.0-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>2.25.0</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<!-- I need to supply rt.jar because of Rhino's sun.org.mozilla.[blah] imports... -->
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
					<compilerArguments>
						<verbose />
						<bootclasspath>${java.home}/lib/rt.jar</bootclasspath>
					</compilerArguments>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<configuration>
					<buildOutputDirectory>eclipsecompiled</buildOutputDirectory>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
				</configuration>
				<version>2.5.1</version>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.1</version>
				<executions>
					<execution>
						<id>jsunit</id>
						<phase>test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<executable>${project.js.test.directory}/lib/phantomjs.exe</executable>
					<!-- Just Great. This only works on Windows machines? See http://mojo.codehaus.org/exec-maven-plugin/exec-mojo.html 
						Use absolute path for everything for now. -->
					<workingDirectory>${project.js.test.directory}/lib</workingDirectory>
					<!-- 
					<arguments>
						<argument>${project.js.test.directory}/lib/run-jasmine.js</argument>
						<argument>${project.js.test.directory}/SpecRunner.html</argument>
						<argument>${project.build.directory}/surefire-reports</argument>
					</arguments>
 -->
					<arguments>
						<argument>run-jasmine.js</argument>
						<argument>./../SpecRunner.html</argument>
						<argument>./../surefire-reports</argument>
					</arguments>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
